(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{165:function(t,a,s){"use strict";s.r(a);var e=s(0),r=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",[t._v("Class Members")]),t._v(" "),s("h3",{attrs:{id:"public-float-s"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-float-s","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public float S")])]),t._v(" "),s("p",[t._v("EC in Siemens")]),t._v(" "),s("h3",{attrs:{id:"public-float-ms"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-float-ms","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public float mS")])]),t._v(" "),s("p",[t._v("EC in milli-Siemens")]),t._v(" "),s("h3",{attrs:{id:"public-float-us"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-float-us","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public float uS")])]),t._v(" "),s("p",[t._v("EC in micro-Siemens")]),t._v(" "),s("h3",{attrs:{id:"public-long-ppm-500"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-long-ppm-500","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public long PPM_500")])]),t._v(" "),s("p",[t._v("Parts per million using 500 as a multiplier")]),t._v(" "),s("h3",{attrs:{id:"public-long-ppm-640"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-long-ppm-640","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public long PPM_640")])]),t._v(" "),s("p",[t._v("Parts per million using 640 as a multiplier")]),t._v(" "),s("h3",{attrs:{id:"public-long-ppm-700"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-long-ppm-700","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public long PPM_700")])]),t._v(" "),s("p",[t._v("Parts per million using 700 as a multiplier")]),t._v(" "),s("h3",{attrs:{id:"public-float-salinitypsu"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-float-salinitypsu","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public float salinityPSU")])]),t._v(" "),s("p",[t._v("Salinity measured practical salinity units")]),t._v(" "),s("h3",{attrs:{id:"public-float-salinityppt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-float-salinityppt","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public float salinityPPT")])]),t._v(" "),s("p",[t._v("Salinity measured parts per thousand")]),t._v(" "),s("h3",{attrs:{id:"public-float-salinityppm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-float-salinityppm","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public float salinityPPM")])]),t._v(" "),s("p",[t._v("Salinity measured parts per million")]),t._v(" "),s("h3",{attrs:{id:"public-float-tempc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-float-tempc","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public float tempC")])]),t._v(" "),s("p",[t._v("Temperature in C")]),t._v(" "),s("h3",{attrs:{id:"public-float-tempf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-float-tempf","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public float tempF")])]),t._v(" "),s("p",[t._v("Temperature in F")]),t._v(" "),s("h1",[t._v("Class Functions")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"}),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-float-measureec-float-tempcoefficient-bool-newtemp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-float-measureec-float-tempcoefficient-bool-newtemp","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public float measureEC(float tempCoefficient, bool newTemp)")])]),t._v(" "),s("p",[t._v("Starts an EC measurement.")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("float")]),t._v(" mS "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" EC_Salinity"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),s("span",{attrs:{class:"token function"}},[t._v("measureEC")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ec"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tempCoefEC"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token boolean"}},[t._v("true")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("    ms "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ec"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("measureEC"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ecsalinity"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tempCoefEC"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token boolean"}},[t._v("True")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("The device starts an EC measurement.")]),t._v(" "),s("h3",{attrs:{id:"parameters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters","aria-hidden":"true"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("div",{pre:!0},[s("ul",[s("li",[s("code",[t._v("tempCoefficient")]),t._v(" the coefficient used to compensate for temperature.")]),t._v(" "),s("li",[s("code",[t._v("newTemp")]),t._v(" boolean to take a new temperature measurement.")])])]),t._v(" "),s("p",[t._v("uS, mS, S, tempC, tempF, PPM_500, PPM_640, PPM_700, salinityPPM, salinityPPT, and salinityPSU are updated")]),t._v(" "),s("aside",{staticClass:"warning"},[t._v("\nPPM is not valid if salinity is being measured, use salinityPPM or salinityPPT\n")]),t._v("\n### Returns\nEC in mS, -1 on error\n")]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-float-measureec"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-float-measureec","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public float measureEC()")])]),t._v(" "),s("p",[t._v("Convenience function to measure EC in freshwater and taking a new temperature measurement.")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("float")]),t._v(" mS "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" EC_Salinity"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),s("span",{attrs:{class:"token function"}},[t._v("measureEC")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("mS "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ec"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("measureEC"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("ec\n")])])]),s("div",{pre:!0},[s("p",[t._v("Calls "),s("code",[t._v("EC_Salinity::measureEC(EC_Salinity::tempCoefEC, true);")])])]),t._v(" "),s("h3",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("p",[t._v("EC in mS, -1 on error")])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-float-measuresalinity"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-float-measuresalinity","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public float measureSalinity()")])]),t._v(" "),s("p",[t._v("Convenience function to measure salinity..")]),t._v(" "),s("p",[t._v("The PSU must be between 2 and 42; a value not within bounds will return -1. The temperature must be within -2 to 35.")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("float")]),t._v(" PSU "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" EC_Salinity"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),s("span",{attrs:{class:"token function"}},[t._v("measureSalinity")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("PSU "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ec"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("measureSalinity"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("sal\n")])])]),s("h3",{attrs:{id:"returns-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns-2","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("p",[t._v("salinity in PSU, -1 on error")])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-float-measuretemp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-float-measuretemp","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public float measureTemp()")])]),t._v(" "),s("p",[t._v("Starts a temperature measurement.")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("float")]),t._v(" tempC "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" EC_Salinity"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),s("span",{attrs:{class:"token function"}},[t._v("measureTemp")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("tempC "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ec"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("measureTemp"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("temp\n")])])]),s("p",[t._v("tempC and tempF are updated")]),t._v(" "),s("aside",{staticClass:"notice"},[t._v("\nA value of -127 means the device is not connected.\n")]),t._v(" "),s("h3",{attrs:{id:"returns-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns-3","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("p",[t._v("temperature in C")])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-void-calibrateprobe-float-solutionec-float-tempcoef"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-void-calibrateprobe-float-solutionec-float-tempcoef","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public void calibrateProbe(float solutionEC,float tempCoef)")])]),t._v(" "),s("p",[t._v("Calibrates the connected probe and saves the result in EEPROM.")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("EC_Salinity"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),s("span",{attrs:{class:"token function"}},[t._v("calibrateProbe")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("2.77")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EC_Salinity"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),t._v("tempCoefEC"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("ec"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("calibrateProbe"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("2.77")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ecsalinity"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tempCoefEC"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("cal 2.77\n")])])]),s("h3",{attrs:{id:"parameters-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters-2","aria-hidden":"true"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("div",{pre:!0},[s("ul",[s("li",[s("p",[s("code",[t._v("solutionEC")]),t._v(" the EC of the calibration solution in mS")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("tempCoef")]),t._v(" the coefficient used to calibrate the probe")])])])]),t._v(" "),s("p",[t._v("offset will be saved in the device's EEPROM and used automatically thereafter")])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-void-calibrateprobelow-float-solutionec-float-tempcoef"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-void-calibrateprobelow-float-solutionec-float-tempcoef","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public void calibrateProbeLow(float solutionEC,float tempCoef)")])]),t._v(" "),s("p",[t._v("Calibrates the dual-point values for the low reading and saves them in the devices's EEPROM.")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("EC_Salinity"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),s("span",{attrs:{class:"token function"}},[t._v("calibrateProbeLow")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1.0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EC_Salinity"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),t._v("tempCoefEC"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("ec"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("calibrateProbeLow"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1.0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ecsalinity"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tempCoefEC"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("low 1.0\n")])])]),s("h3",{attrs:{id:"parameters-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters-3","aria-hidden":"true"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("div",{pre:!0},[s("ul",[s("li",[s("p",[s("code",[t._v("solutionEC")]),t._v(" the EC of the calibration solution in mS")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("tempCoef")]),t._v(" the coefficient used to calibrate the probe")])])])])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-void-calibrateprobehigh-float-solutionec-float-tempcoef"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-void-calibrateprobehigh-float-solutionec-float-tempcoef","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public void calibrateProbeHigh(float solutionEC,float tempCoef)")])]),t._v(" "),s("p",[t._v("Calibrates the dual-point values for the high reading and saves them in the devices's EEPROM.")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("EC_Salinity"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),s("span",{attrs:{class:"token function"}},[t._v("calibrateProbeHigh")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("3.0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EC_Salinity"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),t._v("tempCoefEC"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("ec"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("calibrateProbeHigh"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("3.0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ecsalinity"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tempCoefEC"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("high 3.0\n")])])]),s("h3",{attrs:{id:"parameters-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters-4","aria-hidden":"true"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("div",{pre:!0},[s("ul",[s("li",[s("p",[s("code",[t._v("solutionEC")]),t._v(" the EC of the calibration solution in mS")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("tempCoef")]),t._v(" the coefficient used to calibrate the probe")])])])])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-void-calibratedry"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-void-calibratedry","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public void calibrateDry()")])]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("EC_Salinity"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),s("span",{attrs:{class:"token function"}},[t._v("calibrateDry")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("ec"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("calibrateDry"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("dry\n")])])]),s("p",[t._v("Determines the dry reading of the probe and saves the result in EEPROM. If subsequent measurements are taken that are less than the dry value, a -1 will be returned. This can be used to determine if the probe is not connected as well.")])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-void-setdualpointcalibration-float-reflow-float-refhigh-float-readlow-float-readhigh"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-void-setdualpointcalibration-float-reflow-float-refhigh-float-readlow-float-readhigh","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public void setDualPointCalibration(float refLow,float refHigh,float readLow,float readHigh)")])]),t._v(" "),s("p",[t._v("Sets all the values for dual point calibration and saves them in the devices's EEPROM.")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("EC_Salinity"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),s("span",{attrs:{class:"token function"}},[t._v("setDualPointCalibration")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1.0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3.0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0.9")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3.2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("ec"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("setDualPointCalibration"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1.0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3.0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0.9")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3.2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"parameters-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters-5","aria-hidden":"true"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("div",{pre:!0},[s("ul",[s("li",[s("p",[s("code",[t._v("refLow")]),t._v(" the reference low point")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("refHigh")]),t._v(" the reference high point")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("readLow")]),t._v(" the measured low point in mS")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("readHigh")]),t._v(" the measured high point in mS")])])])])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-void-setk-float-k"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-void-setk-float-k","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public void setK(float k)")])]),t._v(" "),s("p",[t._v("Updates the device with a new cell constant and saves it in EEPROM.")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("EC_Salinity"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),s("span",{attrs:{class:"token function"}},[t._v("setK")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1.121")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("ec"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("setK"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1.121")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("k 1.121\n")])])]),s("h3",{attrs:{id:"parameters-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters-6","aria-hidden":"true"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("div",{pre:!0},[s("ul",[s("li",[s("code",[t._v("k")]),t._v(" the new cell constant")])])])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-float-getk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-float-getk","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public float getK()")])]),t._v(" "),s("p",[t._v("Retrieves the cell constant from the device.")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("float")]),t._v(" k "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" EC_Salinity"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),s("span",{attrs:{class:"token function"}},[t._v("getK")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("k "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ec"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getK"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("k\n")])])]),s("h3",{attrs:{id:"returns-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns-4","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("p",[t._v("the cell constant")])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-float-getcalibratedry"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-float-getcalibratedry","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public float getCalibrateDry()")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("float")]),t._v(" dry "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" EC_Salinity"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),s("span",{attrs:{class:"token function"}},[t._v("getCalibrateDry")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("dry "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ec"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getCalibrateDry"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("dry\n")])])]),s("p",[t._v("Retrieves the dry reading of the probe")]),t._v(" "),s("h3",{attrs:{id:"returns-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns-5","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("p",[t._v("dry reading")])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-void-reset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-void-reset","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public void reset()")])]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("reset\n")])])]),s("p",[t._v("Resets all the stored calibration information.")])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-void-settempconstant-byte-b"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-void-settempconstant-byte-b","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public void setTempConstant(byte b)")])]),t._v(" "),s("p",[t._v("Configures device to use the provided temperature constant.")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("EC_Salinity"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),s("span",{attrs:{class:"token function"}},[t._v("setTempConstant")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("25")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nEC_Salinity"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),s("span",{attrs:{class:"token function"}},[t._v("setTempConstant")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("0xFF")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{attrs:{class:"token comment"}},[t._v("// use the actual tempeature")]),t._v("\n")])])]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("ec"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("setTempConstant"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("25")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nec"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("setTempConstant"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("255")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("tc 1 25\ntc 0\ntc 1 255\n")])])]),s("p",[t._v("By default, the temperature constant is set to 25 which will adjust the measured values to 25C. To use the actual temperature, set the value to 0xFF.")]),t._v(" "),s("h3",{attrs:{id:"parameters-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters-7","aria-hidden":"true"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("div",{pre:!0},[s("ul",[s("li",[s("code",[t._v("b")]),t._v(" the temperature to use for compensation")])])])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-byte-gettempconstant"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-byte-gettempconstant","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public byte getTempConstant()")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("tc\n")])])]),s("p",[t._v("Retrieves the temperature constant.")]),t._v(" "),s("h3",{attrs:{id:"returns-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns-6","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("p",[t._v("the temperature to used for compensation")])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-void-usetemperaturecompensation-bool-b"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-void-usetemperaturecompensation-bool-b","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public void useTemperatureCompensation(bool b)")])]),t._v(" "),s("p",[t._v("Configures device to use temperature compensation or not.")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("EC_Salinity"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),s("span",{attrs:{class:"token function"}},[t._v("useTemperatureCompensation")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token boolean"}},[t._v("true")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("ec"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("useTemperatureCompensation"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token boolean"}},[t._v("True")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("tc 1\n")])])]),s("h3",{attrs:{id:"parameters-8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters-8","aria-hidden":"true"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("div",{pre:!0},[s("ul",[s("li",[s("code",[t._v("b")]),t._v(" true/false")])])])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-bool-usingtemperaturecompensation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-bool-usingtemperaturecompensation","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public bool usingTemperatureCompensation()")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("tc\n")])])]),s("p",[t._v("Determines if temperature compensation is being used.")]),t._v(" "),s("h3",{attrs:{id:"returns-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns-7","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("p",[t._v("true if using compensation, false otherwise")])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-void-usedualpoint-bool-b"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-void-usedualpoint-bool-b","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public void useDualPoint(bool b)")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("dp 1\n")])])]),s("p",[t._v("Configures device to use dual-point calibration.")]),t._v(" "),s("h3",{attrs:{id:"parameters-9"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters-9","aria-hidden":"true"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("div",{pre:!0},[s("ul",[s("li",[s("code",[t._v("b")]),t._v(" true/false")])])])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-bool-usingdualpoint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-bool-usingdualpoint","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public bool usingDualPoint()")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("dp\n")])])]),s("p",[t._v("Determines if dual point calibration is being used.")]),t._v(" "),s("h3",{attrs:{id:"returns-8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns-8","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("p",[t._v("true if using compensation, false otherwise")])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-float-getcalibratehighreference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-float-getcalibratehighreference","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public float getCalibrateHighReference()")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("high\n")])])]),s("p",[t._v("Retrieves the dual-point calibration high value.")]),t._v(" "),s("h3",{attrs:{id:"returns-9"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns-9","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("p",[t._v("the dual-point calibration high value")])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-float-getcalibratelowreference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-float-getcalibratelowreference","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public float getCalibrateLowReference()")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("low\n")])])]),s("p",[t._v("Retrieves the dual-point calibration low value.")]),t._v(" "),s("h3",{attrs:{id:"returns-10"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns-10","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("p",[t._v("the dual-point calibration low value")])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h3",{attrs:{id:"public-float-getcalibratehighreading"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-float-getcalibratehighreading","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public float getCalibrateHighReading()")])]),t._v(" "),s("p",[t._v("Retrieves the dual-point calibration reading high value.")]),t._v(" "),s("h3",{attrs:{id:"returns-11"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns-11","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("p",[t._v("the dual-point calibration high value")])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-float-getcalibratelowreading"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-float-getcalibratelowreading","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public float getCalibrateLowReading()")])]),t._v(" "),s("p",[t._v("Retrieves the dual-point calibration reading low value.")]),t._v(" "),s("h3",{attrs:{id:"returns-12"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns-12","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("p",[t._v("the dual-point calibration low value")])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-void-setcalibrateoffset-float-offset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-void-setcalibrateoffset-float-offset","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public void setCalibrateOffset(float offset)")])]),t._v(" "),s("p",[t._v("Sets the single point offset value.")]),t._v(" "),s("h3",{attrs:{id:"parameters-10"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters-10","aria-hidden":"true"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("div",{pre:!0},[s("ul",[s("li",[s("code",[t._v("offset")]),t._v(" single point offset value")])])])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-float-getcalibrateoffset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-float-getcalibrateoffset","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public float getCalibrateOffset()")])]),t._v(" "),s("p",[t._v("Retrieves the single point offset value.")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("float")]),t._v(" calibrateOffset "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" EC_Salinity"),s("span",{attrs:{class:"token operator"}},[t._v("::")]),s("span",{attrs:{class:"token function"}},[t._v("getCalibrateOffset")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("cal\n")])])]),s("h3",{attrs:{id:"returns-13"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns-13","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("p",[t._v("single point offset value")])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("h2",{attrs:{id:"public-byte-getversion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-byte-getversion","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("public byte getVersion()")])]),t._v(" "),s("p",[t._v("Retrieves the firmware version of the device.")]),t._v(" "),s("h3",{attrs:{id:"returns-14"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns-14","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),s("p",[t._v("version of firmware")])])}],!1,null,null,null);a.default=r.exports}}]);